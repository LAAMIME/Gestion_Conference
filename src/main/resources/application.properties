spring.datasource.url=jdbc:mysql://localhost:3306/conference?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto= create-drop
#spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
#logging.level.org.springframework.security= debug


#security.oauth2.client.client-id= 
#security.oauth2.client.client-secret= 
#security.oauth2.client.access-token-uri= https://www.googleapis.com/oauth2/v3/token
#security.oauth2.client.user-authorization-uri= https://accounts.google.com/o/oauth2/auth
#security.oauth2.client.token-name= oauth_token
#security.oauth2.client.authentication-scheme= query
#security.oauth2.client.client-authentication-scheme= form
#security.oauth2.client.scope= profile email
#security.oauth2.resource.prefer-token-info= false
#security.oauth2.resource.user-info-uri= https://www.googleapis.com/userinfo/v2/me

#security.oauth2.resource.id= # Identifier of the resource.
#security.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.
#security.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.
#security.oauth2.resource.jwk.key-set-uri= # The URI for getting the set of keys that can be used to validate the token.
#security.oauth2.resource.service-id=resource #
#security.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.
#security.oauth2.resource.token-type= # The token type to send when using the userInfoUri.
#security.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server
